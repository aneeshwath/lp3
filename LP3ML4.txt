import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans,k_means #for clustering
from sklearn.decomposition import PCA #linear Dimensionality reduction

df=pd.read_csv('sales_data_sample.csv',encoding='latin')

df.head()

df.columns

df_drop=["ADDRESSLINE1","ADDRESSLINE2","STATUS","POSTALCODE","CITY",'TERRITORY','PHONE','STATE','CONTACTFIRSTNAME','CONTACTLASTNAME','CUSTOMERNAME']
df=df.drop(df_drop,axis=1)

print(df['COUNTRY'].unique())
print(df['PRODUCTLINE'].unique())
print(df['DEALSIZE'].unique())

productline=pd.get_dummies(df['PRODUCTLINE'])
Dealsize=pd.get_dummies(df['DEALSIZE'])

df=pd.concat([df,productline,Dealsize],axis=1)
df_drop=['COUNTRY,'PRODUCTLINE','DEALSIZE'] #Dropping Country too as there are lot of countries
df=df.drop(df_drop,axis=1)
df['PRODUCTCODE']=pd.Categorical(df['PRODUCTCODE']).codes #converting datatype
df.drop("ORDERDATE',axis=1,inplace=True) #Dropping the Orderdate as Month is already included

distortions=[] #within CLuster sum of squares from the centroid
K=range(1,10)
for k in K:
	kmeanModel=Kmeans(n_clusters=k)
	kmeanModel.fit(df)
	distortions.append(kmeanModel.inertia_) #appending the inertia to the distortions

plt.figure(figsize=(16,8))
plt.plot(K,distortion,'bx-')
plt.xlable('K')
plt.ylable('Distortion')
plt.title('The Elbow Method Showing The Optimal K')
plt.show()

X_train=df.values #return a numpy array
model=Kmeans(n_clusters=3,random_state=2)
model=model.fit(X_train) #Fitting the values to create a model
predictions=model.predict(X_train)	#predicting the cluster values(0,1 or 2)

model.cluster_centers_ #finding the centroids (3 in total,each array contain centroid for particular feature)

pca=PCA(n_components=2) #converting all features into 2 columns to make it easy to visualize using principal component analysis
reduced_X=pd.DataFrame(pca.fit_transform(X_train),columns=['PCA1','PCA2']) #creating a dataframe
reduced_X['Clusters']=predictions #adding clusters to reduced dataframe
reduced_centers=pca.transform(model.cluster_centers_) #transforming centroid into 3 in x and y coordinates

#Plottinf the cluster 
plt.figure(figsize(14,10)) #taking cluster number and first column #taking same cluster number and second column #Assigning colour
plt.scatter(reduced_X[reduced_X['Clusters']==0].loc[:,'PCA1'],reduced_X[reduced_X['Clusters']==0].loc[:,'PCA2'],color='slateblue')
plt.scatter(reduced_X[reduced_X['Clusters']==1].loc[:,'PCA1'],reduced_X[reduced_X['Clusters']==1].loc[:,'PCA2'],color='springgreen')
plt.scatter(reduced_X[reduced_X['Clusters']==2].loc[:,'PCA1'],reduced_X[reduced_X['Clusters']==2].loc[:,'PCA2'],color='indigo')
plt.scatter(reduced_centers[:,0],reduced_centers[:,1],color='black',marker='x',s=300)